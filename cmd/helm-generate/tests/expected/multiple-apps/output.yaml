apiVersion: v1
kind: Namespace
metadata:
  annotations:
    fluxcd.io/ignore: sync_only
  labels:
    name: ns1
  name: ns1
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: app1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: web-application
    app.kubernetes.io/version: 1.16.0
    helm.sh/chart: chart-0.1.0
  name: my-awesome-web-application
  namespace: ns1
spec:
  ports:
  - name: http
    port: 3000
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/instance: app1
    app.kubernetes.io/name: web-application
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: app1
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: web-application
    app.kubernetes.io/version: 1.16.0
    helm.sh/chart: chart-0.1.0
  name: my-awesome-web-application
  namespace: ns1
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: app1
      app.kubernetes.io/name: web-application
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: app1
        app.kubernetes.io/name: web-application
    spec:
      containers:
      - image: my-custom-image:1.16.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: http
        name: chart
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: http
        resources: {}
        securityContext: {}
      securityContext: {}
      serviceAccountName: default
---
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    fluxcd.io/ignore: sync_only
  labels:
    name: ns2
  name: ns2
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  labels:
    chart: helm-cronjobs-1.0.0
  name: app2-hello-world
  namespace: ns2
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: app2
            cron: hello-world
        spec:
          containers:
          - image: hello-world:latest
            imagePullPolicy: IfNotPresent
            name: hello-world
          restartPolicy: OnFailure
          securityContext:
            fsGroup: 2000
            runAsGroup: 1000
            runAsUser: 1000
  schedule: '* * * * *'
  successfulJobsHistoryLimit: 3
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  labels:
    chart: helm-cronjobs-1.0.0
  name: app2-hello-ubuntu
  namespace: ns2
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: app2
            cron: hello-ubuntu
        spec:
          containers:
          - args:
            - -c
            - echo $(date) - hello from ubuntu
            command:
            - /bin/bash
            image: ubuntu:latest
            imagePullPolicy: Always
            name: hello-ubuntu
            resources:
              limits:
                cpu: 50m
                memory: 256Mi
              requests:
                cpu: 50m
                memory: 256Mi
          restartPolicy: OnFailure
          securityContext:
            fsGroup: 2000
            runAsGroup: 1000
            runAsUser: 1000
  schedule: '*/5 * * * *'
  successfulJobsHistoryLimit: 3
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  labels:
    chart: helm-cronjobs-1.0.0
  name: app2-hello-env-var
  namespace: ns2
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: app2
            cron: hello-env-var
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: kubernetes.io/e2e-az-name
                    operator: In
                    values:
                    - e2e-az1
                    - e2e-az2
          containers:
          - args:
            - -c
            - echo $(date) - hello from $ECHO_VAR
            command:
            - /bin/sh
            env:
            - name: CLUSTER
              value: cluster-name
            - name: ECHO_VAR
              value: busybox
            image: busybox:latest
            imagePullPolicy: Always
            name: hello-env-var
            resources:
              limits:
                cpu: 50m
                memory: 256Mi
              requests:
                cpu: 50m
                memory: 256Mi
          nodeSelector:
            type: infra
          restartPolicy: Never
          securityContext:
            fsGroup: 2000
            runAsGroup: 1000
            runAsUser: 1000
          tolerations:
          - effect: NoSchedule
            operator: Exists
  schedule: '* * * * *'
  successfulJobsHistoryLimit: 3
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: app3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 1.16.0
    helm.sh/chart: chart-0.1.0
  name: app3-redis
  namespace: ns2
spec:
  ports:
  - name: http
    port: 5000
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/instance: app3
    app.kubernetes.io/name: redis
  type: LoadBalancer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: app3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 1.16.0
    helm.sh/chart: chart-0.1.0
  name: app3-redis
  namespace: ns2
spec:
  replicas: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: app3
      app.kubernetes.io/name: redis
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: app3
        app.kubernetes.io/name: redis
    spec:
      containers:
      - image: nginx:1.16.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /
            port: http
        name: chart
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: http
        resources: {}
        securityContext: {}
      securityContext: {}
      serviceAccountName: default
